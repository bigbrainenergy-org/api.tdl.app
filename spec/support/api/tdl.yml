openapi: 3.0.1
info:
  title: TDL App API
  version: v0
  description: Provides a REST API backend for arbitrary TDL App front-ends.
  contact:
    name: TDL App Support
    email: support@tdl.app

servers:
  - url: https://api.tdl.app/v0
    description: Production Server
  # TODO: Is it worth implementing a sandbox server?
  # - url: https://sandbox.tdl.app/v0
  #   description: >
  #     Sandbox server (that resets daily? not implementing until it's useful)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    #########################
    ## Error Response Body ##
    #########################
    # Schema for error response body. See components -> responses
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error
    #################
    ## Inbox Items ##
    #################
    ArrayOfInboxItems:
      type: array
      items:
        $ref: '#/components/schemas/InboxItem'
      uniqueItems: true
    InboxItem:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        notes:
          type: string
          nullable: true
      required:
        - id
        - title
    ##################
    ## Next Actions ##
    ##################
    ##################
    ## Waiting Fors ##
    ##################
    ##############
    ## Projects ##
    ##############
    ##############
    ## Contexts ##
    ##############
    ###############
    ## OLD STUFF ##
    ###############
    ArrayOfLists:
      type: array
      items:
        $ref: '#/components/schemas/List'
      uniqueItems: true
    ArrayOfTags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      uniqueItems: true
    ArrayOfTasks:
      type: array
      items:
        $ref: '#/components/schemas/Task'
      uniqueItems: true
    ArrayOfRules:
      type: array
      items:
        $ref: '#/components/schemas/Rule'
      uniqueItems: true
    Username:
      type: object
      properties:
        username:
          type: string
      required:
        - username
    List:
      type: object
      properties:
        id:
          type: integer
        order:
          type: integer
        title:
          type: string
      required:
        - id
        - order
        - title
    Tag:
      type: object
      properties:
        id:
          type: integer
        order:
          type: integer
        title:
          type: string
        color:
          type: string
      required:
        - id
        - order
        - title
        - color
    Task:
      type: object
      properties:
        id:
          type: integer
        list_id:
          type: integer
        title:
          type: string
        order:
          type: integer
        notes:
          type: string
        completed_at:
          type: string
        deadline_at:
          type: string
        prioritize_at:
          type: string
        remind_me_at:
          type: string
        review_at_at:
          type: string
      required:
        - id
        - list_id
        - title
        - order
    Rule:
      type: object
      properties:
        id:
          type: integer
        pre_id:
          type: integer
        post_id:
          type: integer
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    SessionToken:
      type: object
      properties:
        session_token:
          type: string
      required:
        - session_token
  responses:
    BadRequest:
      description: Missing parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PaymentRequired:
      description: Your subscription has expired, app in readonly mode
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: The changes requested could not be processed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: You don't have permission to do that
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotImplemented:
      description: Endpoint not implemented yet
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServiceUnavailable:
      description: API is currently unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

# Apply security scheme to all endpoints
security:
  - bearerAuth: []

# FIXME: RSwag doesn't support requestBody description
paths:
  /inbox_items:
    post:
      requestBody:
        description: Inbox Item to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxItem'
  /inbox_items/{id}:
    patch:
      requestBody:
        description: Updates for existing inbox item
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxItem'
  ###############
  ## OLD STUFF ##
  ###############
  /health:
    get:
      summary: Returns the current status of the API
      tags:
        - Health
      responses:
        '200':
          description: OK
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
  /rules:
    get:
      summary: Returns an array of the current user's rules.
      tags:
        - Rules
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfRules'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /tags:
    get:
      summary: Returns an array of the current user's tags.
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTags'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create a new tag for the current user.
      tags:
        - Tags
      requestBody:
        description: Tag to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /tags/sync-ordering:
    patch:
      summary: Update the ordering for current user's tags.
      tags:
        - Tags
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /tags/{id}:
    get:
      summary: Returns the information for a specific tag.
      tags:
        - Tags
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update an existing tag.
      tags:
        - Tags
      requestBody:
        description: Updates for existing tag
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      summary: Destroy a tag.
      tags:
        - Tags
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /tasks:
    get:
      summary: Returns an array of the current user's tasks.
      tags:
        - Tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTasks'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create a new task for the current user.
      tags:
        - Tasks
      requestBody:
        description: Task to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /tasks/{id}:
    get:
      summary: Returns the information for a specific task.
      tags:
        - Tasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update an existing task.
      tags:
        - Tasks
      requestBody:
        description: Updates for existing task
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      summary: Destroy a task.
      tags:
        - Tasks
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  /lists:
    get:
      summary: Returns an array of the current user's lists.
      tags:
        - Lists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfLists'
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: Create a new list for the current user.
      tags:
        - Lists
      requestBody:
        description: List to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /lists/sync-ordering:
    patch:
      summary: Update the ordering for current user's lists.
      tags:
        - Lists
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /lists/{id}:
    get:
      summary: Returns the information for a specific list.
      tags:
        - Lists
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      summary: Update an existing list.
      tags:
        - Lists
      requestBody:
        description: Updates for existing list
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/List'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      summary: Destroy a list.
      tags:
        - Lists
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /login:
    post:
      summary: >
        Takes login credentials, and returns a JWT session token if successful.
      tags:
        - Authentication
      security: [] # Don't require login when logging in...
      requestBody:
        description: Username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionToken'
        '400':
          $ref: '#/components/responses/BadRequest'
  /logout:
    delete:
      summary: >
        Logs out your current session by revoking the JWT token server-side.
      tags:
        - Authentication
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
  /verify/token:
    post:
      summary: >
        2FA verification using a hardware token.
      tags:
        - Authentication
      responses:
        '501':
          $ref: '#/components/responses/NotImplemented'
  /verify/app:
    post:
      summary: >
        2FA verification using an authy app.
      tags:
        - Authentication
      responses:
        '501':
          $ref: '#/components/responses/NotImplemented'
  /username:
    get:
      summary: >
        Retrieves the current user's username.
      tags:
        - Settings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Username'
        '401':
          $ref: '#/components/responses/Unauthorized'
